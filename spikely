#!/usr/bin/perl
use strict;
use warnings;

use Getopt::Long;
use Math::Random::Discrete;
use List::Util qw(shuffle);
use YAML qw(LoadFile);
use Carp;

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------

my $usage = "

Synopsis:

# Get this usage statement (note this is a function not an option).
spikely help

# Get usage statement for a particular function.
spikely cohort --help

# Run cohort spiking mode with parameters defined in a config file.
spikely cohort --config_file spikely.yaml --disease_vcf clinvar.vcf.gz \
    --sample_vcf case_control.vcf.gz

# Run trio spiking mode with parameters on the command line.
# NOTE: trio spiking not yet implimented.
spikely trio --ped family.ped --inheritance recessive --af_key MAF \
    disease_alleles.vcf.gz

Description:

This script takes a VCF file of causal variants and produce a VCF file
with those variants 'spiked' into the genotypes of a set of
individuals defined by various genetic and population parameters.  The
script has several modes of operation corresponding to various NGS
genetic analysis designs (i.e. trio, pedigree, cohort etc.).  It
understands genetic concepts such as inheritance, penetrance and
population attributable risk and allele population frequency and
allows those parameters to be specified in a configuration file.  the
VCF file of affected cases.  Note that currently only cohort spiking
is implimented.

Functions:

help
cohort
trio

# The following functions are not yet implimented.
duo
quartet1
quartet2
pedigree

";

my $function = shift @ARGV;

my $DEBUG;

our $COMMAND_LINE = $0 . join ' ', @ARGV;

if (! $function) {
    my $cmd_ln = $0 . join(' ', '', @ARGV);
    warn "$usage\n\n";
    send_message('FATAL',
	 'must_specify_function',
		 $cmd_ln);
}

if ($function eq 'duo') {
    spike_duo();
}
elsif ($function eq 'trio') {
    spike_trio();
}
elsif ($function eq 'quartet1') {
    spike_quartet1();
}
elsif ($function eq 'quartet2') {
    spike_quartet2();
}
elsif ($function eq 'pedigree') {
    spike_pedigree();
}
elsif ($function eq 'cohort') {
    spike_cohort();
}
elsif ($function eq 'help') {
    warn $usage;
    exit(0);
}
else {
    warn "$usage\n\n";
    send_message('FATAL',
		 'invalid_function',
		 $function);
}

exit(0);

#-----------------------------------------------------------------------------
#-------------------------------- SUBROUTINES --------------------------------
#-----------------------------------------------------------------------------

sub parse_vcf {

    my ($file, $args) = @_;
    $args ||= {};

    # Valid args
    # headers_only: 0/undef=FALSE, Any other value=TRUE
    # map_info_code: perl code snippet to modify INFO values

    my $IN;

    if (! defined $file) {
      send_message('FATAL',
		   'must_provide_vcf_file',
		   'No VCF file was provided to parse_vcf');
    }
    elsif (! -e $file) {
      send_message('FATAL',
		   'vcf_file_does_not_exist',
		   '$file');
    }
    elsif (! -r $file) {
      send_message('FATAL',
		   'vcf_file_is_not_readable',
		   $file);
    }

    if ($file =~ /\.vcf$/) {
	open ($IN, '<', $file) or
      send_message('FATAL',
		   'cant_open_file_for_reading',
		   $file);
    }
    elsif ($file =~ /\.vcf\.gz$/) {
	open($IN, '-|', "gunzip -c $file") or
      send_message('FATAL',
		   'cant_open_file_for_reading',
		   $file);
    }
    else {
      send_message('FATAL',
		   'invalid_file_extension',
		   $file);
    }

    my @meta_data;
    my $header;
    my @sample_ids;
    my %id_idx_map;
    my @variants;

    my %idxs;
  LINE:
    while (my $line = <$IN>) {
	chomp $line;
	if ($line =~ /^\#\#/) {
	    push @meta_data, $line;
	}
	elsif ($line =~ /^\#CHROM/) {
	    $header = $line;
	    @sample_ids = split /\t/, $line;
	    splice(@sample_ids, 0, 9);
	    my $idx = 0;
	    map {$id_idx_map{$_} = $idx++} @sample_ids;
	    last LINE if $args->{headers_only};
	}
	else {
	    my ($chrom, $pos, $id, $ref, $alt, $qual, $filter,
		$info_txt, $format_txt, @gts) = split /\t/, $line;
	    my $idx = "${id}_" . ++$idxs{$id};
	    $format_txt ||= '';
	    my @info_data = split /;/, $info_txt;
	    my %info;
	    for my $key_txt (@info_data) {
		my ($key, $value) = split /=/, $key_txt;
		$value = defined $value ? $value : '';
		my @values = split /,/, $value;
		if (exists $args->{map_info_key} && $args->{map_info_key} eq $key) {
		    if (! exists $args->{map_info_code} || ! $args->{map_info_code}) {
			send_message('ERROR', 'missing_map_info_code');
		    }
		    else {
			for (@values) {
			    my $error;
			    {
				local $@;
				eval $args->{map_info_code};
				$error = $@ if $@
			    }
			    send_message('FATAL', 'error_in_map_info_code',
					 $error) if $error;
			}
		    }
		}
		push @{$info{$key}}, @values;
	    }
	    my @formats = split /:/, $format_txt;
	    my %record = ('CHROM'	=> $chrom,
			  'POS'	        => $pos,
			  'ID'		=> $id,
			  'REF' 	=> $ref,
			  'ALT'	        => $alt,
			  'QUAL'	=> $qual,
			  'FILTER'	=> $filter,
			  'INFO'	=> $info_txt,
			  'FORMAT'	=> $format_txt,
			  'GTS'  	=> \@gts,
			  'info_data'   => \%info,
			  'format_data' => \@formats,
			  'IDX'         => $idx,
		);
	    push @variants, \%record;
	}
    }
    my %vcf_data = (meta_data  => \@meta_data,
		    header     => $header,
		    variants   => \@variants,
		    sample_ids => \@sample_ids,
		    id_idx_map => \%id_idx_map,
	);

    return \%vcf_data;
}

#-----------------------------------------------------------------------------

sub parse_ped {

  my $file = shift;

  open (my $IN, '<', $file) or
    send_message('FATAL',
		 'cant_open_ped_file_for_reading',
		 $file);

  my %pedigree;
 LINE:
  while (my $line = <$IN>) {

    next LINE if $line =~ /^\#/;
    chomp $line;
    my ($kindred_id, $sample_id, $paternal_id, $maternal_id, $sex,
	$affection, $project) = split /\t/, $line;

    $pedigree{$kindred_id}{$sample_id} = {paternal_id	 => $paternal_id,
					  maternal_id	 => $maternal_id,
					  sex		 => $sex,
					  affection	 => $affection,
					  project        => $project,
					 };

  }
  return wantarray ? %pedigree : \%pedigree;
}

#-----------------------------------------------------------------------------

sub spike_duo {

    my ($x) = @_;

    warn $usage;
    send_message('FATAL',
		 'function_not_implimented',
		 'Spiking function duo is not implimented yet.');
}

#-----------------------------------------------------------------------------

sub spike_trio {

  my $usage = "

Synopsis:

# Run trio spiking mode with parameters defined in a config file.
spikely spike_trio --config_file spikely_trio.yaml --disease_vcf clinvar.vcf.gz \
    --ped_file family_tio.ped --sample_vcf family_trio.vcf.gz

Description:

The spike_trio function takes a VCF file of disease variants and
produce a VCF file with those variants 'spiked' into the genotypes of
a set of trio (unaffected mother and father an affected proband)
samples.

Options:

--max_rate, -r

    The max MAF for any given variant.

--af_key, -f

    The INFO key in the VCF file that contains the population MAF for
    each variant.

--gene_id_key, -g

    The INFO key in the VCF file that contains the gene symbol for
    each variant.

--config_file, -c

    The filename for a YAML formatted file that contains gene and
    variant configuration options.

--disease_vcf, -x

    VCF file containing diesease causing alleles.

--sample_vcf, -y

    VCF file containing 3 samples - the family trio.

--ped_file, -d

    The pedigree file in plink PED format.

--maternal_id, -m


--paternal_id, -p


--proband_id, -o


--map_info_key

    An INFO key name that will we mapped with perl code snippet given
    to --map_info_code option.  This option must be given together
    with --map_info_code.

--map_info_code

    A snippet of perl code that will be used to map in INFO value.
    The INFO key to operate on is given by --map_info_key and this
    option must be given together with --map_info_key.  The code
    provided to this option is passed to an eval.  The current INFO
    value is available via \$_, so to split map the INFO key GENEINFO
    such that it's value becomes the all text up to the first colon,
    you could do:

      --map_info_key GENEINFO --map_info_code '(\$_) = split /,/'

";


  my $opts = {};
  my $opt_success = GetOptions($opts,
			       'help|h',
			       'max_rate|r=s',
			       'af_key|f=s',
			       'gene_id_key|g=s',
			       'config_file|c=s',
			       'disease_vcf|x=s',
			       'sample_vcf|y=s',
			       'ped_file|d=s',
			       'maternal_id|m=s',
			       'paternal_id|p=s',
			       'proband_id|o=s',
			       'map_info_key=s',
			       'map_info_code=s',
			      );

  if ($opts->{help}) {
      print $usage;
      exit(0);
  }

  if(! $opt_success) {
      warn $usage;
      send_message('FATAL', 'option_parsing_error',
		   'Look for error message above usage statement');
  }

  # Load config file.
  my $config = {};
  if ($opts->{config_file}) {
      $config = LoadFile($opts->{config_file});
      send_message('INFO', 'loaded_config_file', $opts->{config_file});
  }

  # Load and map disease VCF file.
  my $disease_vcf;
  if (defined $opts->{disease_vcf}) {
      $disease_vcf = parse_vcf($opts->{disease_vcf},
			       {map_info_key  => $opts->{map_info_key},
				map_info_code => $opts->{map_info_code}});
      send_message('INFO', 'loaded_disease_allele_vcf_file', $opts->{disease_vcf});
  }
  else {
      warn $usage;
      send_message('FATAL', 'missing_disease_allele_vcf_file', '');
  }

  my %disease_map;
  map {$disease_map{$_->{IDX}} = $_} @{$disease_vcf->{variants}};

  # Load headers only from sample VCF file.
  my $smpl_hdrs = parse_vcf($opts->{sample_vcf}, {headers_only => 1});
  send_message('INFO', 'process_update', "Sample VCF File: $opts->{sample_vcf}");
  my $sample_ids = $smpl_hdrs->{sample_ids};
  my $sample_count = scalar @{$sample_ids};
  send_message('INFO', 'process_update', "Sample count: $sample_count");

  # Load PED details
  my %trios;
  if ($opts->{ped_file}) {
    my $pedigree = parse_ped($opts->{ped_file});

  FAMILY:
    for my $family_id (keys %{$pedigree}) {
      my $family = $pedigree->{$family_id};
    SAMPLE:
      for my $sample_id (keys %{$family}) {
	my $sample = $family->{$sample_id};
	my $maternal_id = $sample->{maternal_id};
	my $paternal_id = $sample->{paternal_id};
	if ( $maternal_id != 0 && $paternal_id != 0) {
	  # Check maternal sample is in PED file
	  if (! exists $family->{$maternal_id}) {
	    send_message('WARN', 'missing_maternal_id_in_ped_file',
			 $maternal_id);
	  }
	  # Check maternal sample is in VCF file
	  if (! grep {$maternal_id eq $_} @{$sample_ids}) {
	    send_message('WARN', 'missing_mother_in_vcf_file',
			 $maternal_id);
	    next FAMILY;
	  }
	  # Check maternal sex
	  my $maternal_sex = $family->{$maternal_id}{sex};
	  if ($maternal_sex != 2) {
	    send_message('WARN', 'mother_not_female_in_ped_file',
			 "$maternal_id, $maternal_sex", );
	  }
	  # Check maternal affection
	  my $maternal_affection = $family->{$maternal_id}{affection};
	  if ($maternal_affection == 2) {
	    send_message('WARN', 'mother_affected_in_ped_file',
			 "$maternal_id, $maternal_affection", );
	  }
	  # Check paternal sample is in PED file
	  if (! exists $family->{$paternal_id}) {
	    send_message('WARN', 'missing_paternal_id_in_ped_file',
			 $paternal_id);
	  }
	  # Check paternal sample is in VCF file
	  if (! grep {$paternal_id eq $_} @{$sample_ids}) {
	    send_message('WARN', 'missing_father_in_vcf_file',
			 $paternal_id);
	    next FAMILY;
	  }
	  # Check paternal sex
	  my $paternal_sex = $family->{$paternal_id}{sex};
	  if ($paternal_sex != 1) {
	    send_message('WARN', 'mother_not_female_in_ped_file',
			 "$paternal_id, $paternal_sex", );
	  }
	  # Check paternal affection
	  my $paternal_affection = $family->{$paternal_id}{affection};
	  if ($paternal_affection == 2) {
	    send_message('WARN', 'mother_affected_in_ped_file',
			 "$paternal_id, $paternal_affection", );
	  }
	  $trios{$family_id}{mother}{id} = $maternal_id;
	  $trios{$family_id}{father}{id} = $paternal_id;
	  $trios{$family_id}{proband}{id} = $sample_id;
	}
      }
    }
  }
  elsif ($opts->{maternal_id} && $opts->{paternal_id} && $opts->{proband_id}) {
    $trios{FAM01}{mother}{id}  = $opts->{maternal_id};
    $trios{FAM01}{father}{id}  = $opts->{paternal_id};
    $trios{FAM01}{proband}{id} = $opts->{proband_id};
  }
  else {
    warn $usage;
    send_message('FATAL', 'must_provide_pedigree_info',
		 'Use either -e or -m, -p, and -o together');
  }

  # Set up gene & variant data structures.
  my %gene_data;
  my %variant_data;
  my $gene_par_sum;
  my $gene_info_key;

  # Set gene_id from command line opts or...
  if (exists $opts->{gene_id_key}) {
    $gene_info_key = $opts->{gene_id_key};
    send_message('INFO',
		 'setting_gene_info_key',
		  $gene_info_key);
  }
  # ...from config
  elsif (exists $config->{gene_id_key}) {
    $gene_info_key = $config->{gene_id_key};
    send_message('INFO',
		 'setting_gene_info_key',
		  $gene_info_key);
  }
  # ...default GENEINFO (i.e. ClinVar VCF)
  else {
    $gene_info_key = 'GENEINFO';
    send_message('WARN',
		 'setting_gene_info_key_to_default',
		  $gene_info_key);
  }
  send_message('INFO', 'process_update', "Gene ID key from INFO column: $gene_info_key");

  my $total_variant_count;
  my %genes_data;
  for my $variant (@{$disease_vcf->{variants}}) {
    $total_variant_count++;
    send_message('INFO',
		 'processing_variant',
		 $variant->{IDX}
		);
    $variant_data{map}{$variant->{IDX}} = $variant;

    # Get ID of gene associated with variant or set to default.
    my $gene_id;
    if (exists $variant->{info_data}{$gene_info_key}) {
      $gene_id = $variant->{info_data}{$gene_info_key}[0];
    }
    else {
      $gene_id = 'UNKNOWN_GENE';
    }

    send_message('INFO',
		 'found_gene_in_disease_allele_vcf',
		 $gene_id) unless exists $gene_data{$gene_id};

    $gene_data{$gene_id}{variant_count}++;
    push @{$gene_data{$gene_id}{variants}}, $variant;

    my $maf;
    # Set variant AF from VCF af_key given in commandline opts
    if (exists $variant->{info_data} &&
	exists $opts->{af_key} &&
	exists $variant->{info_data}{$opts->{af_key}}) {
	$maf = $variant->{info_data}{$opts->{af_key}}[0];
	send_message('DEBUG', 'variant_af_set_from_vcf', "$variant->{IDX}: $maf");
    }
    # Set variant AF from VCF af_key given in config
    elsif (exists $variant->{info_data} &&
	   exists $config->{af_key} &&
	   exists $variant->{info_data}{$config->{af_key}}) {
	$maf = $variant->{info_data}{$config->{af_key}}[0];
	send_message('DEBUG', 'variant_af_set_from_vcf', "$variant->{IDX}: $maf");
    }
    #...else from variant config
    elsif (exists $variant->{info_data} && 
	   exists $config->{ac_key} &&
	   exists $config->{an_key} &&
	   exists $variant->{info_data}{$config->{ac_key}} &&
	   exists $variant->{info_data}{$config->{an_key}}) {
	$maf = ($variant->{info_data}{$config->{ac_key}} /
		$variant->{info_data}{$config->{an_key}});
	send_message('DEBUG', 'variant_af_set_from_allele_count', "$variant->{IDX}: $maf");
    }
    #...else from config default
    elsif (exists $config->{default_af}) {
	$maf = $config->{default_af};
	send_message('DEBUG', 'variant_af_set_from_config_default', "$variant->{IDX}: $maf");
    }
    #...else hard-coded default
    else {
	$maf = 0;
	send_message('DEBUG', 'variant_af_set_from_code_default', "$variant->{IDX}: $maf");
    }
    push @{$gene_data{$gene_id}{mafs}}, $maf;
  }

  send_message('INFO', 'total_variant_count_in_disease_allele_vcf',
	       $total_variant_count);
  for  my $gene (sort keys %gene_data) {
  send_message('INFO', 'variant_count_for_gene',
	       "$gene: $gene_data{$gene}{variant_count}");
  }

  # Set up family data
  my $idx;
  my %spike_map;

  #--------------------
  # CONTINUE WORK HERE
  #--------------------
  # Parse PED file
  # Spike mom, dad, proband
  #
  #
  #
  #--------------------

 FAMILY:
  for my $family_id (keys %trios) {
    send_message('INFO', 'processing_family_id', $family_id);

    # Set heritability from config or default to 1.
    if (exists $config->{samples} &&
	exists $config->{samples}{$family_id} &&
	exists $config->{samples}{$family_id}{heritability}
       ) {
      $trios{$family_id}{heritability} = $config->{samples}{$family_id}{heritability};
      send_message('info',
		   'setting_family_heritability_from_sample_config',
		   "$family_id: $trios{$family_id}{heritability}");
    }
    elsif (exists $opts->{heritability}) {
      $trios{$family_id}{heritability} = $opts->{heritability};
      send_message('info',
		   'setting_family_heritability_from_command_line_opts',
		   "$family_id: $trios{$family_id}{heritability}");
    }
    elsif (exists $config->{heritability}) {
      $trios{$family_id}{heritability} = $config->{heritability};
      send_message('info',
		   'setting_family_heritability_from_default_config',
		   "$family_id: $trios{$family_id}{heritability}");
    }
    else {
      $trios{$family_id}{heritability} = 1 unless
	defined $trios{$family_id}{heritability};
      send_message('warn',
		   'setting_family_heritability_to_default',
		   "$family_id: $trios{$family_id}{heritability}");
    }

    # Determine if sample will have a spiked genotype
    my $heritability_rnd = rand();
    if ($heritability_rnd > $trios{$family_id}{heritability}) {
      send_message('info',
		   'heritability_skipping_family',
		   "$family_id, $heritability_rnd, " .
		   $trios{$family_id}{heritability});
      next FAMILY;
    }

    send_message('INFO', 'spiking_family_id', $family_id);

    my (@genes, @pars, @spike_gene_ids);
    if (exists $config->{genes}) {
	@spike_gene_ids = keys %{$config->{genes}};
    }
    else {
	@spike_gene_ids = keys %gene_data;
    }
    map {push @genes, $_; push @pars, $gene_data{$_}{par}}
      @spike_gene_ids;

    # Determine which gene a sample will be spiked with.
    my $spike_gene_id = Math::Random::Discrete->new(\@pars, \@genes)->rand;
    my $spike_gene = $gene_data{$spike_gene_id};
    send_message('INFO', 'spiking_family_with_gene', "$family_id: $spike_gene_id");

    my $spike_inheritance = $config->{genes}{$spike_gene_id}{inheritance};

    if ($spike_inheritance ne 'recessive') {
      send_message('FATAL', 'gene_for_trio_inheritance_must_be_recessive',
		   $spike_gene->{inheritance});
    }

    my $mafs = $gene_data{$spike_gene_id}{mafs};
    # Maternal variant
    my $mat_variant = Math::Random::Discrete->new($mafs,
						  $gene_data{$spike_gene_id}{variants})->rand;
    my $mat_variant_id = $mat_variant->{IDX};
    send_message('INFO', 'spike_mother_with_variant', "$family_id: $mat_variant_id");
    $spike_map{$mat_variant_id}{$smpl_hdrs->{id_idx_map}{$trios{$family_id}{mother}{id}}}++;
    $spike_map{$mat_variant_id}{$smpl_hdrs->{id_idx_map}{$trios{$family_id}{proband}{id}}}++;

    # Paternal variant
    my $pat_variant = Math::Random::Discrete->new($mafs,
						  $gene_data{$spike_gene_id}{variants})->rand;
    my $pat_variant_id = $pat_variant->{IDX};
    send_message('INFO', 'spike_father_with_variant', "$family_id: $pat_variant_id");
    $spike_map{$pat_variant_id}{$smpl_hdrs->{id_idx_map}{$trios{$family_id}{father}{id}}}++;
    $spike_map{$pat_variant_id}{$smpl_hdrs->{id_idx_map}{$trios{$family_id}{proband}{id}}}++;
    print '';
  }

  # my %summary;
  # for my $var_key (keys %spike_map) {
  #     my $variant = $spike_map{$var_key};
  #     for my $family_key (keys %{$variant}) {
  #	  my $allele_count = $variant->{$family_key};
  #	  $summary{family_allele_count}{$family_key} += $allele_count;
  #	  $summary{var_allele_count}{$var_key} += $allele_count;
  #	  $summary{hom_count}++ if $allele_count == 2;
  #	  $summary{het_count}++ if $allele_count == 1;
  #     }
  # }
  #
  # print '';
  #
  # print STDERR << "END";

  # Summary:
  #
  # Homozygous count: $summary{hom_count}
  # Heterozygous count: $summary{het_count}
  #
  # END

  # Do this better
  push(@{$disease_vcf->{meta_data}}, '##INFO=<ID=SPIKELY,Number=.,Type=Flag,Description="Flag identifying variants added by spikely ">');
  push(@{$disease_vcf->{meta_data}}, '##FORMAT=<ID=GT,Number=1,Type=String,Description="Genotype">')
      unless grep {/##FORMAT=<ID=GT/} @{$disease_vcf->{meta_data}};
  push(@{$disease_vcf->{meta_data}}, "##spikelyCommand=$COMMAND_LINE");

  print join "\n", @{$disease_vcf->{meta_data}};
  print "\n";
  print join "\t", $disease_vcf->{header}, 'FORMAT', @{$sample_ids};
  print "\n";
  for my $variant (@{$disease_vcf->{variants}}) {
    my $variant_id = $variant->{IDX};
    next unless exists $spike_map{$variant_id};
    $variant->{INFO} .= ';SPIKELY';
    print '';
    print join "\t", @{$variant}{qw(CHROM POS ID REF ALT QUAL FILTER INFO)};
    print "\tGT";
    for my $sample_id (@{$sample_ids}) {
      my $sample_idx = $smpl_hdrs->{id_idx_map}{$sample_id};
      my $gt = (exists $spike_map{$variant_id}{$sample_idx} ?
		$spike_map{$variant_id}{$sample_idx}        :
		0);
      $gt = ($gt == 2 ? '1/1' :
	     $gt == 1 ? '0/1' :
	     '0/0');
      print "\t$gt";
    }
    print "\n";
    print '';
  }
  print '';
}

#-----------------------------------------------------------------------------

sub spike_quartet1 {

    my ($x) = @_;

    warn $usage;
    send_message('FATAL',
		 'function_not_implimented',
		 'Spiking function quartet1 is not implimented yet.');
}

#-----------------------------------------------------------------------------

sub spike_quartet2 {

    my ($x) = @_;

    warn $usage;
    send_message('FATAL',
		 'function_not_implimented',
		 'Spiking function quartet2 is not implimented yet.');
}

#-----------------------------------------------------------------------------

sub spike_pedigree {

    my ($x) = @_;

    warn $usage;
    send_message('FATAL',
		 'function_not_implimented',
		 'Spiking function pedigree is not implimented yet.');
}

#-----------------------------------------------------------------------------

sub spike_cohort {

  my $usage = "

Synopsis:

# Run cohort spiking mode with parameters defined in a config file.
spikely  spike_cohort --config_file spikely.yaml --disease_vcf clinvar.vcf.gz \
    --sample_vcf case_control.vcf.gz

Description:

The spike_cohort function takes a VCF file of disease variants and
produce a VCF file with those variants 'spiked' into the genotypes of
a set of case & control samples defined by various genetic and
population parameters.  The script understands genetic concepts such
as inheritance, penetrance and population attributable risk and allele
population frequency and allows those parameters to be specified in a
configuration file.

Options:

--inheritance, -i

    recessive - Two causal alleles per affected individual in a given
		causal gene.
    dominant  - One causal allele per affected individual.
    x-linked -	One causal allele on chromosome X genes per male case
		individual.  Two causative alleles on chromosome X
		genes per female case individual.
    additive  - Potentially many causal alleles per affected individual.

--max_rate, -r

    The max MAF for any given variant.

--par, -p

    The max percent of individuals affected with a given gene.

--penetrance, -e

    The max percent of individuals with causal alleles, but labeled in
    PED file as unaffected.

--heritability, -h

    The heritability option takes a value from 0 to 1.  This value
    determines the probability (for each individual case) that the
    individual will have disease allele(s) in one of the genes
    represented in the disease VCF file.  A higher value will give
    each case individual a higer probability of having a causative
    allele while a lower value will give each case individual a lower
    probability of having a causative allele.  This option does not
    determine which disease gene or allele an individual will recieve,
    but only if the individual will recieve any spiked disease allele.
    If the value begins with an equals sign (e.g. -h '=0.1') then
    rather than a probabalistic heritability the number of spiked
    individuals will be equal to the number of cases multiplied by the
    heritability (rounded to the nearest integer).

--ped_file, -d

    The pedigree file in plink PED format.

--af_key, -f

    The INFO key in the VCF file that contains the population MAF for
    each variant.

--gene_id_key, -g

    The INFO key in the VCF file that contains the gene symbol for
    each variant.

--config_file, -c

    The filename for a YAML formatted file that contains gene and
    variant configuration options.

";


  my $opts = {};
  my $opt_success = GetOptions($opts,
			       'help|h',
			       'inheritance|i=s',
			       'max_rate|r=s',
			       'par|p=s',
			       'penetrance|e=s',
			       'heritability|h=s',
			       'ped_file|d=s',
			       'af_key|f=s',
			       'gene_id_key|g=s',
			       'config_file|c=s',
			       'disease_vcf|x=s',
			       'sample_vcf|y=s',
			      );

  if ($opts->{help}) {
      print $usage;
      exit(0);
  }

  if(! $opt_success) {
      warn $usage;
      send_message('FATAL', 'option_parsing_error',
		   'Look for error message above usage statement');
  }

  # Load config file.
  my $config = {};
  if ($opts->{config_file}) {
      $config = LoadFile($opts->{config_file});
      send_message('INFO', 'loaded_config_file', $opts->{config_file});
  }

  # Load and map disease VCF file.
  my $disease_vcf;
  if (defined $opts->{disease_vcf}) {
      $disease_vcf = parse_vcf($opts->{disease_vcf});
      send_message('INFO', 'loaded_disease_allele_vcf_file', $opts->{disease_vcf});
  }
  else {
      warn $usage;
      send_message('FATAL', 'missing_disease_allele_vcf_file', '');
  }

  my %disease_map;
  map {$disease_map{$_->{IDX}} = $_} @{$disease_vcf->{variants}};

  # Load headers only from sample VCF file.
  my $smpl_hdrs = parse_vcf($opts->{sample_vcf}, {headers_only => 1});
  send_message('INFO', 'process_update', "Sample VCF File: $opts->{sample_vcf}");
  my $sample_ids = $smpl_hdrs->{sample_ids};
  my $sample_count = scalar @{$sample_ids};
  send_message('INFO', 'process_update', "Sample count: $sample_count");

  # Determine case IDs (might not be all samples);
  my @case_ids;
  if (exists $config->{case_ids}) {
    @case_ids = split /,/, $config->{case_ids};
  }
  else {
    @case_ids = @{$sample_ids};
  }
  my $case_count = scalar @case_ids;
  send_message('INFO', 'process_update', "Case count: $case_count");

  # Set up gene & variant data structures.
  my %gene_data;
  my %variant_data;
  my $gene_par_sum;
  my $gene_info_key;

  # Set gene_id from command line opts or...
  if (exists $opts->{gene_id_key}) {
    $gene_info_key = $opts->{gene_id_key};
    send_message('INFO',
		 'setting_gene_info_key',
		  $gene_info_key);
  }
  # ...from config
  elsif (exists $config->{gene_id_key}) {
    $gene_info_key = $config->{gene_id_key};
    send_message('INFO',
		 'setting_gene_info_key',
		  $gene_info_key);
  }
  # ...default GENEINFO (i.e. ClinVar VCF)
  else {
    $gene_info_key = 'GENEINFO';
    send_message('WARN',
		 'setting_gene_info_key_to_default',
		  $gene_info_key);
  }
  send_message('INFO', 'process_update', "Gene ID key from INFO column: $gene_info_key");

  my $total_variant_count;
  my %genes_data;
  for my $variant (@{$disease_vcf->{variants}}) {
    $total_variant_count++;
    send_message('INFO',
		 'processing_variant',
		 $variant->{IDX}
		);
    $variant_data{map}{$variant->{IDX}} = $variant;

    # Get ID of gene associated with variant or set to default.
    my $gene_id;
    if (exists $variant->{info_data}{$gene_info_key}) {
      $gene_id = $variant->{info_data}{$gene_info_key}[0];
    }
    else {
      $gene_id = 'UNKNOWN_GENE';
    }

    send_message('INFO',
		 'found_gene_in_disease_allele_vcf',
		 $gene_id) unless exists $gene_data{$gene_id};

    $gene_data{$gene_id}{variant_count}++;
    push @{$gene_data{$gene_id}{variants}}, $variant;

    # Set gene inheritance from gene specific config or...
    if (exists $config->{genes}           &&
	exists $config->{genes}{$gene_id} &&
	exists $config->{genes}{$gene_id}{inheritance}) {
      $gene_data{$gene_id}{inheritance} =
	$config->{genes}{$gene_id}{inheritance};
      send_message('INFO',
		   'setting_gene_inheritance_from_gene_config',
		   $gene_data{$gene_id}{inheritance});
    }
    # ...from command-line opts
    elsif (exists $opts->{inheritance}) {
      $gene_data{$gene_id}{inheritance} = $opts->{inheritance};
      send_message('INFO',
		   'setting_gene_inheritance_from_command_line_opts',
		   $gene_data{$gene_id}{inheritance});
    }
    # ...from default config
    elsif (exists $config->{inheritance}) {
      $gene_data{$gene_id}{inheritance} = $config->{inheritance};
      send_message('INFO',
		   'setting_gene_inheritance_from_config_default',
		   $gene_data{$gene_id}{inheritance});
    }
    # ...default to dominant
    else {
      $gene_data{$gene_id}{inheritance} = 'dominant';
      send_message('WARN',
		   'setting_gene_inheritance_to_default',
		   $gene_data{$gene_id}{inheritance});
    }

    # Set gene PAR from gene config or...
    if (exists $config->{genes}           &&
	exists $config->{genes}{$gene_id} &&
	exists $config->{genes}{$gene_id}{par}) {
      $gene_data{$gene_id}{par} = $config->{genes}{$gene_id}{par};
      send_message('INFO',
		   'setting_par_from_gene_config',
		   $gene_data{$gene_id}{par});
    }
    # ...from opts
    elsif (exists $opts->{par}) {
      $gene_data{$gene_id}{par} = $opts->{par};
      send_message('INFO',
		   'setting_par_from_command_line_opts',
		   $gene_data{$gene_id}{par});
    }
    # ...from default config
    elsif (exists $config->{par}) {
      $gene_data{$gene_id}{par} = $config->{par};
      send_message('INFO',
		   'setting_par_from_config_default',
		   $gene_data{$gene_id}{par});
    }
    # ...to default of 1.0
    else {
      $gene_data{$gene_id}{par} = 1;
      send_message('WARN',
		   'setting_par_to_default',
		   $gene_data{$gene_id}{par});
    }

    my $gene_par_sum += $gene_data{$gene_id}{par};

    my $maf;
    if (exists $variant->{info_data}{$config->{af_key}}) {
	$maf = $variant->{info_data}{$config->{af_key}}[0];
	send_message('DEBUG', 'variant_af_set_from_vcf', "$variant->{IDX}: $maf");
    }
    elsif (exists $variant->{info_data}{$config->{an_key}}) {
	$maf = 1 / ($variant->{info_data}{$config->{an_key}} + 1);
	send_message('DEBUG', 'variant_af_set_from_allele_count', "$variant->{IDX}: $maf");
    }
    elsif (exists $config->{default_af}) {
	$maf = $config->{default_af};
	send_message('DEBUG', 'variant_af_set_from_config_default', "$variant->{IDX}: $maf");
    }
    else {
	$maf = 0;
	send_message('DEBUG', 'variant_af_set_from_code_default', "$variant->{IDX}: $maf");
    }
    push @{$gene_data{$gene_id}{mafs}}, $maf;
  }

  send_message('INFO', 'total_variant_count_in_disease_allele_vcf',
	       $total_variant_count);
  for  my $gene (sort keys %genes_data) {
  send_message('INFO', 'variant_count_for_gene',
	       "$gene: $gene_data{$gene}");
  }

  # Handle Hard Heritibility.  If heritability is set on command
  # line or in config with a leading equals sign (e.g. -h '=0.1')
  # then exactly x samples will be spiked where x =
  # round($case_count * $heritability).  In that case we create a
  # hash of the IDs of x samples and during spiking loop below we
  # alwasy spike those samples.
  my $hard_hrtbly;
  if (exists $opts->{heritability}) {
      if ($opts->{heritability} =~ /^=/) {
	  send_message('info',
		       'setting_hard_heritability_from_command_line_opts',
		       "$opts->{heritability}");
	  $hard_hrtbly = $opts->{heritability};
	  $hard_hrtbly =~ s/^=//;
      }
  }
  elsif (exists $config->{heritability}) {
      if ($config->{heritability} =~ /^=/) {
	  send_message('info',
		       'setting_hard_heritability_from_config_file',
		       "$config->{heritability}");
	  $hard_hrtbly = $config->{heritability};
	  $hard_hrtbly =~ s/^=//;
      }
  }
  
  my %spike_case_ids;
  if ($hard_hrtbly) {
      my $spike_count = sprintf("%.0f", $case_count * $hard_hrtbly);
      my @rand_case_ids = shuffle @case_ids;
      # Crete a hash of case_ids to spike;
      map {$spike_case_ids{$_}++} splice(@rand_case_ids, 0, $spike_count);
  }
  
  # Set up case data
  my $idx;
  my %case_data;
  my %spike_map;

 CASE:
  for my $case_id (@case_ids) {
    send_message('INFO', 'processing_case_id', $case_id);

    $case_data{$case_id}{idx} = $idx++;
    # Set heritability from config or default to 1.
    if ($hard_hrtbly) {
	$case_data{$case_id}{heritability} =
	    ($spike_case_ids{$case_id} == 1) ? 1 : 0;
    }
    elsif (exists $config->{samples} &&
	exists $config->{samples}{$case_id} &&
	exists $config->{samples}{$case_id}{heritability}
       ) {
      $case_data{$case_id}{heritability} = $config->{samples}{$case_id}{heritability};
      send_message('info',
		   'setting_case_heritability_from_sample_config',
		   "$case_id: $case_data{$case_id}{heritability}");
    }
    elsif (exists $opts->{heritability}) {
      $case_data{$case_id}{heritability} = $opts->{heritability};
      send_message('info',
		   'setting_case_heritability_from_command_line_opts',
		   "$case_id: $case_data{$case_id}{heritability}");
    }
    elsif (exists $config->{heritability}) {
      $case_data{$case_id}{heritability} = $config->{heritability};
      send_message('info',
		   'setting_case_heritability_from_default_config',
		   "$case_id: $case_data{$case_id}{heritability}");
    }
    else {
      $case_data{$case_id}{heritability} = 1 unless
	defined $case_data{$case_id}{heritability};
      send_message('warn',
		   'setting_case_heritability_to_default',
		   "$case_id: $case_data{$case_id}{heritability}");
    }

    # Determine if sample will have a spiked genotype
    my $heritability_rnd = rand();
    if ($heritability_rnd > $case_data{$case_id}{heritability}) {
      send_message('info',
		   'heritability_skipping_sample',
		   "$case_id, $heritability_rnd, " .
		   $case_data{$case_id}{heritability});
      next CASE;
    }

    send_message('INFO', 'spiking_case_id', $case_id);

    my (@genes, @pars, @spike_gene_ids);
    if (exists $config->{genes}) {
	@spike_gene_ids = keys %{$config->{genes}};
    }
    else {
	@spike_gene_ids = keys %gene_data;
    }
    map {push @genes, $_; push @pars, $gene_data{$_}{par}}
      @spike_gene_ids;

    # Determine which gene a sample will be spiked with.
    my $spike_gene_id = Math::Random::Discrete->new(\@pars, \@genes)->rand;
    my $spike_gene = $gene_data{$spike_gene_id};
    send_message('INFO', 'spiking_case_with_gene', "$case_id: $spike_gene_id");

    my $spike_inheritance = $spike_gene->{inheritance};

    my $mafs = $gene_data{$spike_gene_id}{mafs};
    map {$_ = 1- $_} @{$mafs} if $spike_inheritance =~ /de.novo/i;
    my $allele_count = $spike_inheritance eq 'recessive' ? 2 : 1;
    for my $count (1 .. $allele_count) {
      # Choose the rarest alleles when in de novo inheritance mode.
      my $variant = Math::Random::Discrete->new($mafs,
						$gene_data{$spike_gene_id}{variants})->rand;
      my $variant_id = $variant->{IDX};
      send_message('INFO', 'spike_case_with_variant', "$case_id: $variant_id");
      $spike_map{$variant_id}{$case_id}++;
    }
    print '';
  }

  my %summary;
  for my $var_key (keys %spike_map) {
      my $variant = $spike_map{$var_key};
      for my $case_key (keys %{$variant}) {
	  my $allele_count = $variant->{$case_key};
	  $summary{case_allele_count}{$case_key} += $allele_count;
	  $summary{var_allele_count}{$var_key} += $allele_count;
	  $summary{hom_count}++ if $allele_count == 2;
	  $summary{het_count}++ if $allele_count == 1;
      }
  }

  print '';

  print STDERR << "END";

Summary:

Homozygous count: $summary{hom_count}
Heterozygous count: $summary{het_count}

END


  # send_message('INFO', 'summarize_spike_map'

  # Do this better
  push(@{$disease_vcf->{meta_data}}, '##INFO=<ID=SPIKELY,Number=.,Type=Flag,Description="Flag identifying variants added by spikely ">');
  push(@{$disease_vcf->{meta_data}}, '##FORMAT=<ID=GT,Number=1,Type=String,Description="Genotype">')
      unless grep {/##FORMAT=<ID=GT/} @{$disease_vcf->{meta_data}};
  push(@{$disease_vcf->{meta_data}}, "##spikelyCommand=$COMMAND_LINE");
  print join "\n", @{$disease_vcf->{meta_data}};
  print "\n";
  print join "\t", $disease_vcf->{header}, 'FORMAT', @{$sample_ids};
  print "\n";
  for my $variant (@{$disease_vcf->{variants}}) {
    my $variant_id = $variant->{IDX};
    next unless exists $spike_map{$variant_id};
    $variant->{INFO} .= ';SPIKELY';
    print join "\t", @{$variant}{qw(CHROM POS ID REF ALT QUAL FILTER INFO)};
    print "\tGT";
    for my $sample_id (@{$sample_ids}) {
      my $gt = (exists $spike_map{$variant_id}{$sample_id} ?
		$spike_map{$variant_id}{$sample_id}        :
		0);
      $gt = ($gt == 2 ? '1/1' :
	     $gt == 1 ? '0/1' :
	     '0/0');
      print "\t$gt";
    }
    print "\n";
    print '';
  }
  print '';

}

#-----------------------------------------------------------------------------

sub send_message {

  my ($level, $code, $message) = @_;

  if (! $level) {
    $level = 'FATAL_DEV';
    $code = 'missing_message_level';
    $message = ('Called send_message without specifying a level.  ' .
		'Please report on https://github.com/Yandell-Lab/spikely/issues');

  }

  if (! $code) {
    $level = 'FATAL_DEV';
    $code = 'missing_message_code';
    $message = ('Called send_message without specifying a code.  ' .
		'Elevating error to FATAL.' .
		'Please report on https://github.com/Yandell-Lab/spikely/issues');
  }

  $message ||= 'No specific error message';
  chomp $message;
  $message .= "\n";

  $level = uc $level;

  if ($level eq 'INFO' || $level eq 'WARN') {
    warn join( ' : ', $level, $code, $message);
  }
  elsif ($level eq 'DEBUG') {
    warn join( ' : ', $level, $code, $message) if $DEBUG;
  }
  elsif ($level eq 'FATAL') {
    croak join( ' : ', $level, $code, $message);
  }
  elsif ($level eq 'FATAL_DEV') {
    confess join( ' : ', $level, $code, $message);
  }
  else {
    confess join( ' : ', 'FATAL_DEV', 'invalid_message_level', $level);
  }
}

#-----------------------------------------------------------------------------
